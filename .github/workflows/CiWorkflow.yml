# @file CiWorkflow.yml
#
# A reusable CI workflow that runs basic CI tests and Rust CI tests.
#
##
# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: Apache-2.0
##
name: CI

on:
  workflow_call:
    inputs:
      mdbook-path:
        description: "Path to the mdbook to build"
        required: false
        default: ""
        type: string
    secrets:
      PATINA_CRATES_IO_TOKEN:
        description: "Token to access and publish to crates.io"
        required: true

jobs:
  basic_ci:
    name: Basic Repo CI

    runs-on: ubuntu-latest

    steps:
      - name: ‚úÖ Checkout Repository ‚úÖ
        uses: actions/checkout@v4

      - name: üî§ Check Spelling üî§
        uses: streetsidesoftware/cspell-action@v6
        with:
          treat_flagged_words_as_errors: true
          strict: true
          inline: warning
          incremental_files_only: false

      - name: Markdown Linting
        uses: avto-dev/markdown-lint@v1.5.0
        with:
          config: .markdownlint.yml
          args: "**/*.md"

      - name: üõ†Ô∏è Download Rust Tools üõ†Ô∏è
        uses: OpenDevicePartnership/patina/.github/actions/rust-tool-cache@main

      - name: üìñ Build Book üìñ
        run: mdbook build ${{ inputs.mdbook-path }}
        if: ${{ inputs.mdbook-path != '' }}

  run:
    name: Rust CI

    needs: [ basic_ci ]

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:
      - name: ‚úÖ Checkout Repository ‚úÖ
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Download Rust Tools üõ†Ô∏è
        uses: OpenDevicePartnership/patina/.github/actions/rust-tool-cache@main

      - name: Setup Cred Provider
        if: runner.os == 'Linux'
        run: |
          mkdir -p ~/.cargo
          cat <<EOF >> ~/.cargo/config.toml
          [registry]
          global-credential-providers = ["cargo:token"]
          EOF

      - name: Setup Cred Provider
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $path = "$HOME\.cargo\config.toml"
          New-Item -ItemType Directory -Force -Path "$HOME\.cargo" | Out-Null
          "[registry]" | Out-File -Append -FilePath $path
          'global-credential-providers = ["cargo:token"]' | Out-File -Append -FilePath $path

      - name: Login to Registry
        run: cargo login "${{ secrets.PATINA_CRATES_IO_TOKEN }}"

      - name: Run cargo-vet
        run: cargo make vet

      - name: Run cargo-fmt
        run: cargo fmt --all --check
        env:
          RUSTC_BOOTSTRAP: 1

      - name: Run cargo-deny
        run: cargo make deny

      - name: Run cargo-clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        env:
          RUSTC_BOOTSTRAP: 1

      - name: Crate Release Dry Run
        if: ${{ !contains(github.event.pull_request.body, '(skip cargo release dry run)') }}
        run: cargo release --no-tag --workspace --no-push --allow-branch '*'
        env:
          RUSTC_BOOTSTRAP: 1

      - name: üß™ Run Tests üß™
        run: cargo make coverage

      - name: Test Documentation
        run: cargo test --doc
        env:
          RUSTC_BOOTSTRAP: 1

      - name: Build documentation
        run: cargo make doc

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: target/lcov.info
          fail_ci_if_error: true

      - name: Build std
        run: cargo make build

      - name: Build X64
        run: cargo make build-x64

      - name: Build AArch64
        run: cargo make build-aarch64

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-ci-artifacts
          path: |
            Cargo.lock
            target/cobertura.xml

  finalize:
    name: Finalize

    needs: [ run ]

    runs-on: ubuntu-latest

    steps:
      - name: Finish
        run: echo "CI Complete"
